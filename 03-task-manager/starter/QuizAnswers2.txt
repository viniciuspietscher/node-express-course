1 - In this lesson, you created a middleware function called asyncWrapper. Why?

The asyncWrapper gets a function as an argument and wraps the function inside a try-catch block. That way we don't need to wrap our controllers functions inside a try-catch block.

2 - Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const {id: taskID} = req.params
  const task = await Task.findOne({ _id: taskID })
  if (!task){
    // assuming "createCustomError" is the error handler that references CustomAPIError
    return next(createCustomError(`No task with id: ${taskID}`, 404))
  }
  res.status(200).json({ task })
})